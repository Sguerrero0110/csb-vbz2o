{"version":3,"sources":["Table.js","Button.js","InputField.js","TableContainer.js","App.js","index.js"],"names":["Table","columns","data","setSelectedRow","selectedRow","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","i","getRowProps","onClick","e","className","cells","cell","getCellProps","Button","clickHandler","disabled","buttonLabel","InputField","label","changeHandler","value","placeholder","type","name","htmlFor","onChange","TableContainer","useState","setData","rowValue","setRowValue","setColumns","buttonsArrayObject","handler","editedRow","console","log","state","tData","shift","splice","getRespData","a","fetch","resp","json","random","Math","round","number","useEffect","respData","columnKeys","Object","keys","columnKeysFilter","filter","col","columnsData","Header","accessor","numOfButtons","buttonRender","slice","button","renderButtons","key","inputData","currentTarget","App","ReactDOM","document","getElementById"],"mappings":"4OA2CeA,MAzCf,YAAgE,IAA/CC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,eAAgBC,EAAe,EAAfA,YAC9C,EAMIC,mBAAS,CAAEJ,UAASC,SALtBI,EADF,EACEA,cACAC,EAFF,EAEEA,kBACAC,EAHF,EAGEA,aACAC,EAJF,EAIEA,KACAC,EALF,EAKEA,WAGF,OACE,kDAAWJ,KAAX,cACE,gCACGE,EAAaG,KAAI,SAACC,GAAD,OAChB,8CAAQA,EAAYC,uBAApB,aACGD,EAAYE,QAAQH,KAAI,SAACI,GAAD,OACvB,8CAAQA,EAAOC,kBAAf,aAAkCD,EAAOE,OAAO,wBAKxD,iDAAWV,KAAX,aACGE,EAAKE,KAAI,SAACO,EAAKC,GAEd,OADAT,EAAWQ,GAET,8CACMA,EAAIE,eADV,IAEEC,QAAS,SAACC,GAAD,OAAOnB,EAAegB,IAC/BI,UACEnB,IAAgBe,EAAI,gBAAkB,sBAJ1C,SAOGD,EAAIM,MAAMb,KAAI,SAACc,GACd,OAAO,8CAAQA,EAAKC,gBAAb,aAA8BD,EAAKR,OAAO,4BCzBlDU,MAPf,YAAqE,IAAnDJ,EAAkD,EAAlDA,UAAWK,EAAuC,EAAvCA,aAAcC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YACnD,OACE,wBAAQT,QAASO,EAAcC,SAAUA,EAAUN,UAAWA,EAA9D,SACGO,KCoBQC,MAvBf,YAQI,IAPFC,EAOC,EAPDA,MACAC,EAMC,EANDA,cACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,KACAb,EAEC,EAFDA,UACAc,EACC,EADDA,KAEA,OACE,gCACE,uBAAOC,QAASD,EAAhB,SAAuBL,IACvB,uBACEO,SAAUN,EACVC,MAAOA,EACPX,UAAWA,EACXc,KAAMA,EACNF,YAAaA,EACbC,KAAMA,QCwJCI,MAvKf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOvC,EAAP,KAAawC,EAAb,KACA,EAAsCD,mBAAS,MAA/C,mBAAOrC,EAAP,KAAoBD,EAApB,KACA,EAAgCsC,mBAAS,IAAzC,mBAAOE,EAAP,KAAiBC,EAAjB,KACA,EAA8BH,mBAAS,IAAvC,mBAAOxC,EAAP,KAAgB4C,EAAhB,KACMC,EAAqB,CACzB,CACEd,MAAO,oBACPe,QA+FJ,WACE,IAAMC,EAAY9C,EAAKE,GACvB6C,QAAQC,IAAI,UAAWhD,EAAM8C,GAC7BJ,EAAYI,IAjGVzB,UAAW,sCAEb,CACES,MAAO,0BACPe,QAgFJ,WACE,GAAoB,OAAhB3C,EACFsC,GAAQ,SAACS,GAAD,4BAAeA,GAAf,CAAsBR,WACzB,CACL,IAAMS,EAAK,YAAOlD,GAClBkD,EAAMhD,GAAeuC,EACrBD,EAAQU,KArFR7B,UAAW,kCAEb,CACES,MAAO,WACPe,QAlBoB,2CAmBpBxB,UAAW,sCAEb,CACES,MAAO,eACPe,QA4CJ,WACE,IAAIK,EAAK,YAAOlD,GAChBkD,EAAMC,QACNX,GAAQ,8BAAUU,MAClBjD,EAAe,OA/CboB,UAAW,uCAEb,CACES,MAAO,kBACPe,QAqDJ,WACE,IAAIK,EAAK,YAAOlD,GAChBkD,EAAME,OAAOlD,EAAa,GAC1BsC,GAAQ,8BAAUU,MAClBjD,EAAe,OAxDboB,UAAW,wCA7BS,SAmDTgC,IAnDS,2EAmDxB,0CAAAC,EAAA,6DAA2BtB,EAA3B,+BAAmC,EAAnC,SAEqBuB,MAAM,8CAAD,OACwBvB,IAHlD,cAEQwB,EAFR,gBAKeA,EAAKC,OALpB,mFAnDwB,oEA2DxB,gCAAAH,EAAA,6DACQI,EAASC,KAAKC,MAAsB,EAAhBD,KAAKD,UACzBG,EAASH,EAAS,EAAIA,EAAS,EAFvC,SAGqBL,EAAYQ,GAHjC,OAGQL,EAHR,OAIET,QAAQC,IAAI,MAAOQ,EAAMK,EAAQ7D,GACjCwC,GAAQ,SAACS,GAAD,4BAAeA,GAAf,CAAsBO,OALhC,4CA3DwB,sBA0JxB,OAzHAM,qBAAU,WACR,sBAAC,kCAAAR,EAAA,sEACwBD,IADxB,OACOU,EADP,OAEChB,QAAQC,IAAI,WAAYe,GAClBC,EAAaC,OAAOC,KAAKH,GACzBI,EAAmBH,EAAWI,QAClC,SAACC,GAAD,MAAkC,kBAAlBN,EAASM,MAErBC,EAAcH,EAAiB1D,KAAI,SAAC4D,GAAD,MAAU,CACjDE,OAAQF,EACRG,SAAUH,MAEZtB,QAAQC,IAAI,UAAWsB,GACvB3B,EAAW2B,GACX9B,EAAQ,CAACuB,IAbV,2CAAD,KAeC,IA0GD,gCApBF,WAA0C,IAAnBU,EAAkB,uDAAH,EAE9BC,EAAe9B,EAClB+B,MAAM,EAAGF,GACThE,KAAI,SAACmE,GACJ,IAAQ/B,EAA8B+B,EAA9B/B,QAASxB,EAAqBuD,EAArBvD,UAAWS,EAAU8C,EAAV9C,MAC5B,OAEE,aADA,CACC,EAAD,CACET,UAAWA,EACXO,YAAaE,EACbJ,aAAc,kBAAMmB,UAK5B,OAAO6B,EAKJG,CAAc,GADjB,IA7CO9E,EAAQU,KAAI,SAAC4D,GAClB,OACE,cAAC,EAAD,CACEvC,MAAOuC,EAAIE,OACXxC,cAAe,SAACX,GAAD,OA1BvB,SAAuBA,EAAG0D,GACxB,IAAMC,EAAY3D,EAAE4D,cAAchD,MAClCU,EAAY,2BAAKD,GAAN,kBAAiBqC,EAAMC,KAwBNhD,CAAcX,EAAD,UAAOiD,EAAIG,YAC9CxC,MAAOS,EAAS4B,EAAIG,UACpBvC,YAAaoC,EAAIE,OACjBrC,KAAK,OACLb,UAAU,wBACVc,KAAMkC,EAAIG,cAuCd,cAAC,EAAD,CACEzE,QAASA,EACTC,KAAMA,EACNE,YAAaA,EACbD,eAAgBA,QCnITgF,EAHH,WACV,OAAO,cAAC,EAAD,KC9BTC,IAASnE,OAAO,cAAC,EAAD,IAASoE,SAASC,eAAe,W","file":"static/js/main.5b618159.chunk.js","sourcesContent":["import { useTable } from \"react-table\";\r\n\r\nfunction Table({ columns, data, setSelectedRow, selectedRow }) {\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    rows,\r\n    prepareRow\r\n  } = useTable({ columns, data });\r\n\r\n  return (\r\n    <table {...getTableProps()}>\r\n      <thead>\r\n        {headerGroups.map((headerGroup) => (\r\n          <tr {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map((column) => (\r\n              <th {...column.getHeaderProps()}>{column.render(\"Header\")}</th>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </thead>\r\n      <tbody {...getTableBodyProps()}>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <tr\r\n              {...row.getRowProps()}\r\n              onClick={(e) => setSelectedRow(i)}\r\n              className={\r\n                selectedRow === i ? \"bg-yellow-700\" : \"hover:bg-yellow-700\"\r\n              }\r\n            >\r\n              {row.cells.map((cell) => {\r\n                return <td {...cell.getCellProps()}>{cell.render(\"Cell\")}</td>;\r\n              })}\r\n            </tr>\r\n          );\r\n        })}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\nexport default Table;\r\n","import React from \"react\";\r\n\r\nfunction Button({ className, clickHandler, disabled, buttonLabel }) {\r\n  return (\r\n    <button onClick={clickHandler} disabled={disabled} className={className}>\r\n      {buttonLabel}\r\n    </button>\r\n  );\r\n}\r\nexport default Button;\r\n","import React from \"react\";\r\n\r\nfunction InputField({\r\n  label,\r\n  changeHandler,\r\n  value,\r\n  placeholder,\r\n  type,\r\n  className,\r\n  name\r\n}) {\r\n  return (\r\n    <div>\r\n      <label htmlFor={name}>{label}</label>\r\n      <input\r\n        onChange={changeHandler}\r\n        value={value}\r\n        className={className}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        type={type}\r\n      ></input>\r\n    </div>\r\n  );\r\n}\r\nexport default InputField;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Table from \"./Table\";\r\nimport Button from \"./Button\";\r\nimport InputField from \"./InputField\";\r\n\r\nfunction TableContainer() {\r\n  const [data, setData] = useState([]);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n  const [rowValue, setRowValue] = useState({});\r\n  const [columns, setColumns] = useState([]);\r\n  const buttonsArrayObject = [\r\n    {\r\n      label: \"edit Selected Row\",\r\n      handler: editRow,\r\n      className: \"border-2 border-black bg-green-700\"\r\n    },\r\n    {\r\n      label: \"Add edited Selected Row\",\r\n      handler: addEditedData,\r\n      className: \"border-2 border-black bg-white\"\r\n    },\r\n    {\r\n      label: \"add Data\",\r\n      handler: addData,\r\n      className: \"border-2 border-black bg-green-300\"\r\n    },\r\n    {\r\n      label: \"Remove First\",\r\n      handler: deletefirst,\r\n      className: \"border-2 border-black bg-yellow-700\"\r\n    },\r\n    {\r\n      label: \"delete by Index\",\r\n      handler: deleteByIndex,\r\n      className: \"border-2 border-black bg-purple-400\"\r\n    }\r\n  ]; //created array of  objects to passing props for button function\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const respData = await getRespData();\r\n      console.log(\"respData\", respData);\r\n      const columnKeys = Object.keys(respData);\r\n      const columnKeysFilter = columnKeys.filter(\r\n        (col) => typeof respData[col] !== \"object\"\r\n      );\r\n      const columnsData = columnKeysFilter.map((col) => ({\r\n        Header: col,\r\n        accessor: col\r\n      }));\r\n      console.log(\"columns\", columnsData);\r\n      setColumns(columnsData);\r\n      setData([respData]);\r\n    })();\r\n  }, []);\r\n\r\n  async function getRespData(value = 1) {\r\n    //will have to use \"/1-10 from jasonplaceholder\"\r\n    const resp = await fetch(\r\n      `https://jsonplaceholder.typicode.com/users/${value}`\r\n    );\r\n    return await resp.json();\r\n  }\r\n\r\n  async function addData() {\r\n    const random = Math.round(Math.random() * 9);\r\n    const number = random > 0 ? random : 1;\r\n    const resp = await getRespData(number);\r\n    console.log(\"add\", resp, number, data);\r\n    setData((state) => [...state, resp]);\r\n  }\r\n\r\n  function deletefirst() {\r\n    let tData = [...data];\r\n    tData.shift();\r\n    setData(() => [...tData]);\r\n    setSelectedRow(null);\r\n  }\r\n\r\n  function deletelast() {\r\n    let tData = [...data];\r\n    tData.pop();\r\n    setData(() => [...tData]);\r\n    setSelectedRow(null);\r\n  }\r\n\r\n  function deleteByIndex() {\r\n    let tData = [...data];\r\n    tData.splice(selectedRow, 1);\r\n    setData(() => [...tData]);\r\n    setSelectedRow(null);\r\n  }\r\n\r\n  function changeHandler(e, key) {\r\n    const inputData = e.currentTarget.value;\r\n    setRowValue({ ...rowValue, [key]: inputData });\r\n  }\r\n\r\n  function addEditedData() {\r\n    if (selectedRow === null) {\r\n      setData((state) => [...state, rowValue]);\r\n    } else {\r\n      const tData = [...data];\r\n      tData[selectedRow] = rowValue;\r\n      setData(tData);\r\n    }\r\n  }\r\n\r\n  function editRow() {\r\n    const editedRow = data[selectedRow];\r\n    console.log(\"editRow\", data, editedRow);\r\n    setRowValue(editedRow);\r\n  }\r\n\r\n  function renderInputs() {\r\n    return columns.map((col) => {\r\n      return (\r\n        <InputField\r\n          label={col.Header}\r\n          changeHandler={(e) => changeHandler(e, `${col.accessor}`)}\r\n          value={rowValue[col.accessor]}\r\n          placeholder={col.Header}\r\n          type=\"text\"\r\n          className=\"border-2 border-black\"\r\n          name={col.accessor}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  /*   <Button\r\n        className={\r\n          selectedRow === null\r\n            ? \"border-2 border-black bg-red-700 opacity-75\"\r\n            : \"border-2 border-black bg-red-700 \"\r\n        }\r\n        buttonLabel=\"Delete by Index\"\r\n        clickHandler={deleteByIndex}\r\n      /> */\r\n\r\n  function renderButtons(numOfButtons = 0) {\r\n    //function for rendering buttons with numofButtons with index starting at 0\r\n    const buttonRender = buttonsArrayObject //local const for return\r\n      .slice(0, numOfButtons) //using parts of button array\r\n      .map((button) => {\r\n        const { handler, className, label } = button; //using button to pass props into Button\r\n        return (\r\n          //using button component for dynamic rendering\r\n          <Button\r\n            className={className}\r\n            buttonLabel={label}\r\n            clickHandler={() => handler()}\r\n          />\r\n        );\r\n      });\r\n\r\n    return buttonRender; //returning resault\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {renderButtons(6)} {/* rendering button function depending on input # */}\r\n      {renderInputs()}\r\n      <Table\r\n        columns={columns}\r\n        data={data}\r\n        selectedRow={selectedRow}\r\n        setSelectedRow={setSelectedRow}\r\n      />\r\n    </div>\r\n  );\r\n}\r\nexport default TableContainer;\r\n","/*\nusing the link below\nhttps://jsonplaceholder.typicode.com/users/1\nyou can pass 1-10 which will give you data on users\nyou can use any of the fields of the current data as you see fit \nyour table must dynamically create the fields based on the incoming json data\nyour input boxes must also dynamically be created based on the incoming json data\nyou can do an initial component did mount fetch call to already have one set of data set in the state\nor you can render the data after a button push which will fetch the json data\nall previous logic should work as before with the table, buttons and input\nTIPS:\nyou can get an array of key names from an object using Object.keys(object_you_are_using) refer to mdn for correct syntax\ndon't forget about the .map, .filter, etc these may help\nmake a function to render all the buttons\nthe function will take in a number which will tell the function how many buttons to render\nif the number entered is 7 then it should render all the previous buttons \nand a new button that will change the bg color to a random color when clicked\nany number over 7 will default to 7\n\n\nleave links and the questions you searched to get the resources you would have used to try to get to the solution\nQuestions:how to have button component render dynamically react\nLinks: https://stackoverflow.com/questions/65251151/dynamically-render-multiple-buttons\n\nQuestions:rending different buttons with different props react\nLinks:https://reactjs.org/docs/conditional-rendering.html\n\nQuestions: button with different props\nLinks: https://www.twilio.com/blog/intro-custom-button-component-typescript-react\n*/\n\nimport TableContainer from \"./TableContainer\";\n\nconst App = () => {\n  return <TableContainer />;\n};\nexport default App;\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App.js\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}